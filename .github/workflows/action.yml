---
  name: GitHub Actions CI
  
  on:
    push:
      branches:
        - main
    pull_request:
      types: [opened, synchronize, reopened]
  
  jobs:
    editorconfig:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: editorconfig-checker/action-editorconfig-checker@main
        - run: editorconfig-checker
  
    black:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: rickstaa/action-black@v1
          with:
            black_args: ". --check"
  
    check_markdown:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Setup Node.js
          uses: actions/setup-node@v3
          with:
            node-version: '16'
        - name: Install markdownlint-cli
          run: npm install -g markdownlint-cli
        - name: Create markdownlint config
          run: |
            echo '{
              "MD013": false,
              "MD012": false,
              "line-length": false
            }' > .markdownlint.json
        - name: Run markdown lint
          run: markdownlint '**/*.md' --ignore node_modules
  
    pylint:
      runs-on: ubuntu-latest
      strategy:
        matrix:
          python-version: ["3.8", "3.10"]
      steps:
        - uses: actions/checkout@v4
        - name: Set up Python ${{ matrix.python-version }}
          uses: actions/setup-python@v4
          with:
            python-version: ${{ matrix.python-version }}
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install pylint
            pip install pylint flask
        - name: Analyzing the code with pylint
          run: |
            pylint -d C0114,C0115,C0116 $(git ls-files '*.py')
  
    run-unittests:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Set up Python
          uses: actions/setup-python@v4
          with:
            python-version: '3.10'
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Run unittests
          run: python -m unittest discover
  
    gitLeaks:
      name: gitleaks
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - uses: gitleaks/gitleaks-action@v2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    sonarcloud:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: SonarCloud Scan
          uses: sonarsource/sonarcloud-github-action@v3.1.0
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            SONAR_HOST_URL: https://sonarcloud.io
          with:
            args: >
              -Dsonar.organization=dxs-0-1
              -Dsonar.projectKey=dxs-0_devops-programme
              -Dsonar.pullrequest.key=${{ github.event.number }}
              -Dsonar.pullrequest.branch=${{ github.event.pull_request.head.ref }}
              -Dsonar.pullrequest.base=${{ github.event.pull_request.base.ref }}
  
    snyk:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Install Snyk
          run: npm install -g snyk
        - name: Fix vulnerabilities with Snyk
          run: snyk fix --file=requirements.txt
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        - name: Run Snyk to check for vulnerabilities
          uses: snyk/actions/python-3.8@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            args: >
              --severity-threshold=high
              --skip-unresolved
  
    yamllint:
      runs-on: ubuntu-latest
      steps:
        - name: Checkout
          uses: actions/checkout@master
        - name: Yamllint
          uses: karancode/yamllint-github-action@master
          with:
            yamllint_strict: false
            yamllint_comment: true
          env:
            GITHUB_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
    build_docker:
      runs-on: ubuntu-latest
      needs: [run-unittests, gitLeaks, sonarcloud, snyk]
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Build an image from Dockerfile
          run: |
            docker build -t dxs01/ci-excercise:${{ github.sha }} .
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Install Snyk
          run: npm install -g snyk
        - name: Fix vulnerabilities with Snyk
          run: snyk fix --file=requirements.txt
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        - name: Run Trivy vulnerability scanner
          uses: aquasecurity/trivy-action@0.28.0
          with:
            image-ref: 'dxs01/ci-excercise:${{ github.sha }}'
            format: 'table'
            exit-code: '1'
            ignore-unfixed: true
            vuln-type: 'os,library'
            severity: 'CRITICAL,HIGH'
  
    push_docker:
      runs-on: ubuntu-latest
      needs: build_docker
      if: success()
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
        - name: Push Docker image
          run: |
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            docker push dxs01/ci-excercise:${{ github.sha }}
  